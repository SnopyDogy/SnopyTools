//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Font_Builder.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("8")]
        public int BitmatPaddingBetweenChars {
            get {
                return ((int)(this["BitmatPaddingBetweenChars"]));
            }
            set {
                this["BitmatPaddingBetweenChars"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("OPENGL")]
        public global::Font_Builder.UV_COORDS_SYSTEMS UVCoordSystem {
            get {
                return ((global::Font_Builder.UV_COORDS_SYSTEMS)(this["UVCoordSystem"]));
            }
            set {
                this["UVCoordSystem"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1024")]
        public int MaxLineWidthInPixels {
            get {
                return ((int)(this["MaxLineWidthInPixels"]));
            }
            set {
                this["MaxLineWidthInPixels"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("CAP_BY_NO_OF_CHARS")]
        public global::Font_Builder.BITMAP_WIDTH_CAP_STYLE MaxLineWidthStyle {
            get {
                return ((global::Font_Builder.BITMAP_WIDTH_CAP_STYLE)(this["MaxLineWidthStyle"]));
            }
            set {
                this["MaxLineWidthStyle"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool PadBitmapToNextPowerOfTwo {
            get {
                return ((bool)(this["PadBitmapToNextPowerOfTwo"]));
            }
            set {
                this["PadBitmapToNextPowerOfTwo"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("16")]
        public int MaxLineWidthInChars {
            get {
                return ((int)(this["MaxLineWidthInChars"]));
            }
            set {
                this["MaxLineWidthInChars"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Transparent")]
        public global::System.Drawing.Color BitmapBackgroundColor {
            get {
                return ((global::System.Drawing.Color)(this["BitmapBackgroundColor"]));
            }
            set {
                this["BitmapBackgroundColor"] = value;
            }
        }
    }
}
